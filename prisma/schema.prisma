// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Store {
  id  String @id @default(uuid())
  name String
  userId String
  billBoards Billboard[] @relation("StoreToBillboard")
  categories Category[] @relation("StoreToCategory")
  sizes Size[] @relation("StoreToSize")
  colors Color[] @relation("StoreToColor")
  products Product[] @relation("StoreToProduct")
  createdAt  DateTime @default(now())
  upddateAt  DateTime @updatedAt
}

model Billboard{
  id String @id @default(uuid())
  storId String
  store Store @relation("StoreToBillboard",fields: [storId],references: [id])
  label String
  imageUrl  String
  categories Category[] @relation()
  createdAt  DateTime @default(now())
  upddateAt  DateTime @updatedAt
  
  @@index([storId])
}
model Category {
  id String @id @default(uuid())
  products Product[] @relation("CategoryToProduct")
  storId String
  store Store @relation("StoreToCategory",fields: [storId],references: [id])
  billboardId String
  billboard Billboard @relation(fields: [billboardId],references: [id])
  name String
  createdAt  DateTime @default(now())
  upddateAt  DateTime @updatedAt

  @@index([storId])
  @@index([billboardId])
}
model Size {
  id String @id @default(uuid())
  storId String
  store Store @relation("StoreToSize",fields: [storId],references: [id])
  products Product[]
  name String
  value String
  createdAt  DateTime @default(now())
  upddateAt  DateTime @updatedAt

  @@index([storId])
}
model Color {
  id String @id @default(uuid())
  storId String
  store Store @relation("StoreToColor",fields: [storId],references: [id])
  products Product[]
  name String
  value String
  createdAt  DateTime @default(now())
  upddateAt  DateTime @updatedAt

  @@index([storId])
}
model Product {
  id String @id @default(uuid())
  storId String
  store Store @relation("StoreToProduct",fields: [storId],references: [id])
  categoryId String
  category Category @relation("CategoryToProduct",fields: [categoryId],references: [id])
  name String
  price Decimal
  isfeatured Boolean @default(false)
  isArchived Boolean @default(false)
  sizeId String
  size Size @relation(fields: [sizeId],references: [id])
  colorId String
  color Color @relation(fields: [colorId],references: [id])
  images Image[]
  createdAt  DateTime @default(now())
  upddateAt  DateTime @updatedAt

  @@index([storId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image{
  id String @id @default(uuid())
  productId String
  product Product @relation(fields: [productId],references: [id],onDelete: Cascade)
  url String
  createdAt  DateTime @default(now())
  upddateAt  DateTime @updatedAt

   @@index([productId])
}